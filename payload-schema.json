{
  "$schema": "/schemas/common/metaschema.json#",
  "$id": "/schemas/generic-worker/simple_posix.json#",
  "title": "Generic worker payload",
  "description": "This schema defines the structure of the `payload` property referred to in a\nTaskcluster Task definition.",
  "type": "object",
  "required": [
    "command",
    "maxRunTime"
  ],
  "additionalProperties": false,
  "properties": {
    "command": {
      "title": "Commands to run",
      "type": "array",
      "minItems": 1,
      "uniqueItems": false,
      "items": {
        "type": "array",
        "minItems": 1,
        "uniqueItems": false,
        "items": {
          "type": "string"
        }
      },
      "description": "One array per command (each command is an array of arguments). Several arrays\nfor several commands.\n\nSince: generic-worker 0.0.1"
    },
    "env": {
      "title": "Env vars",
      "description": "Env vars must be string to __string__ mappings (not number or boolean). For example:\n```\n{\n  \"PATH\": \"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\",\n  \"GOOS\": \"darwin\",\n  \"FOO_ENABLE\": \"true\",\n  \"BAR_TOTAL\": \"3\"\n}\n```\n\nNote, the following environment variables will automatically be set in the task\ncommands:\n  * `TASK_ID` - the task ID of the currently running task\n  * `RUN_ID` - the run ID of the currently running task\n  * `TASKCLUSTER_ROOT_URL` - the root URL of the taskcluster deployment\n  * `TASKCLUSTER_PROXY_URL` (if taskcluster proxy feature enabled) - the\n     taskcluster authentication proxy for making unauthenticated taskcluster\n     API calls\n  * `TASKCLUSTER_WORKER_LOCATION`. See\n    [RFC #0148](https://github.com/taskcluster/taskcluster-rfcs/blob/master/rfcs/0148-taskcluster-worker-location.md)\n    for details.\n\nSince: generic-worker 0.0.1",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "maxRunTime": {
      "type": "integer",
      "title": "Maximum run time in seconds",
      "description": "Maximum time the task container can run in seconds.\n\nSince: generic-worker 0.0.1",
      "multipleOf": 1,
      "minimum": 1,
      "maximum": 86400
    },
    "artifacts": {
      "type": "array",
      "title": "Artifacts to be published",
      "description": "Artifacts to be published.\n\nSince: generic-worker 1.0.0",
      "uniqueItems": true,
      "items": {
        "type": "object",
        "title": "Artifact",
        "additionalProperties": false,
        "properties": {
          "type": {
            "title": "Artifact upload type.",
            "type": "string",
            "enum": [
              "file",
              "directory"
            ],
            "description": "Artifacts can be either an individual `file` or a `directory` containing\npotentially multiple files with recursively included subdirectories.\n\nSince: generic-worker 1.0.0"
          },
          "path": {
            "title": "Artifact location",
            "type": "string",
            "description": "Relative path of the file/directory from the task directory. Note this is not an absolute\npath as is typically used in docker-worker, since the absolute task directory name is not\nknown when the task is submitted. Example: `dist\\regedit.exe`. It doesn't matter if\nforward slashes or backslashes are used.\n\nSince: generic-worker 1.0.0"
          },
          "name": {
            "title": "Name of the artifact",
            "type": "string",
            "description": "Name of the artifact, as it will be published. If not set, `path` will be used.\nConventionally (although not enforced) path elements are forward slash separated. Example:\n`public/build/a/house`. Note, no scopes are required to read artifacts beginning `public/`.\nArtifact names not beginning `public/` are scope-protected (caller requires scopes to\ndownload the artifact). See the Queue documentation for more information.\n\nSince: generic-worker 8.1.0"
          },
          "expires": {
            "title": "Expiry date and time",
            "type": "string",
            "format": "date-time",
            "description": "Date when artifact should expire must be in the future, no earlier than task deadline, but\nno later than task expiry. If not set, defaults to task expiry.\n\nSince: generic-worker 1.0.0"
          },
          "contentType": {
            "title": "Content-Type header when serving artifact over HTTP",
            "type": "string",
            "description": "Explicitly set the value of the HTTP `Content-Type` response header when the artifact(s)\nis/are served over HTTP(S). If not provided (this property is optional) the worker will\nguess the content type of artifacts based on the filename extension of the file storing\nthe artifact content. It does this by looking at the system filename-to-mimetype mappings\ndefined in multiple `mime.types` files located under `/etc`. Note, setting `contentType`\non a directory artifact will apply the same contentType to all files contained in the\ndirectory.\n\nSee [mime.TypeByExtension](https://pkg.go.dev/mime#TypeByExtension).\n\nSince: generic-worker 10.4.0"
          },
          "contentEncoding": {
            "title": "Content-Encoding header when serving artifact over HTTP.",
            "type": "string",
            "enum": [
              "identity",
              "gzip"
            ],
            "description": "Content-Encoding for the artifact. If not provided, `gzip` will be used, except for the\nfollowing file extensions, where `identity` will be used, since they are already\ncompressed:\n\n* 7z\n* bz2\n* deb\n* dmg\n* flv\n* gif\n* gz\n* jpeg\n* jpg\n* png\n* swf\n* tbz\n* tgz\n* webp\n* whl\n* woff\n* woff2\n* xz\n* zip\n* zst\n\nNote, setting `contentEncoding` on a directory artifact will apply the same content\nencoding to all the files contained in the directory.\n\nSince: generic-worker 16.2.0"
          }
        },
        "required": [
          "type",
          "path"
        ]
      }
    },
    "features": {
      "title": "Feature flags",
      "description": "Feature flags enable additional functionality.\n\nSince: generic-worker 5.3.0",
      "type": "object",
      "additionalProperties": false,
      "required": [],
      "properties": {
        "taskclusterProxy": {
          "type": "boolean",
          "title": "Run [taskcluster-proxy](https://github.com/taskcluster/taskcluster/tree/main/tools/taskcluster-proxy) to allow tasks to dynamically proxy requests to taskcluster services",
          "description": "The taskcluster proxy provides an easy and safe way to make authenticated\ntaskcluster requests within the scope(s) of a particular task. See\n[the github project](https://github.com/taskcluster/taskcluster/tree/main/tools/taskcluster-proxy) for more information.\n\nSince: generic-worker 10.6.0"
        },
        "liveLog": {
          "type": "boolean",
          "title": "Enable [livelog](https://github.com/taskcluster/taskcluster/tree/main/tools/livelog)",
          "description": "The live log feature streams the combined stderr and stdout to a task artifact\nso that the output is available while the task is running.\n\nSince: generic-worker 48.2.0",
          "default": true
        },
        "backingLog": {
          "type": "boolean",
          "title": "Enable backing log",
          "description": "The backing log feature publishes a task artifact containing the complete\nstderr and stdout of the task.\n\nSince: generic-worker 48.2.0",
          "default": true
        },
        "interactive": {
          "type": "boolean",
          "title": "Interactive shell",
          "description": "This allows you to interactively run commands from within the worker\nas the task user. This may be useful for debugging purposes.\nCan be used for SSH-like access to the running worker.\nNote that this feature works differently from the `interactive` feature\nin docker worker, which `docker exec`s into the running container.\nSince tasks on generic worker are not guaranteed to be running in a\ncontainer, a bash shell is started on the task user's account.\nA user can then `docker exec` into the a running container, if there\nis one.\n\nSince: generic-worker 49.2.0"
        },
        "loopbackVideo": {
          "type": "boolean",
          "title": "Loopback Video device",
          "description": "Video loopback device created using v4l2loopback.\nA video device will be available for the task. Its\nlocation will be passed to the task via environment\nvariable `TASKCLUSTER_VIDEO_DEVICE`. The\nlocation will be `/dev/video<N>` where `<N>` is\nan integer between 0 and 255. The value of `<N>`\nis not static, and therefore either the environment\nvariable should be used, or `/dev` should be\nscanned in order to determine the correct location.\nTasks should not assume a constant value.\n\nThis feature is only available on Linux. If a task\nis submitted with this feature enabled on a non-Linux,\nposix platform (FreeBSD, macOS), the task will resolve as\n`exception/malformed-payload`.\n\nSince: generic-worker 53.1.0"
        }
      }
    },
    "mounts": {
      "type": "array",
      "description": "Directories and/or files to be mounted.\n\nSince: generic-worker 5.4.0",
      "uniqueItems": false,
      "items": {
        "title": "Mount",
        "$ref": "#/definitions/mount"
      }
    },
    "osGroups": {
      "type": "array",
      "title": "OS Groups",
      "description": "A list of OS Groups that the task user should be a member of. Not yet implemented on\nnon-Windows platforms, therefore this optional property may only be an empty array if\nprovided.\n\nSince: generic-worker 6.0.0",
      "uniqueItems": false,
      "items": {
        "type": "string"
      },
      "maxItems": 0
    },
    "supersederUrl": {
      "type": "string",
      "title": "unused",
      "description": "This property is allowed for backward compatibility, but is unused."
    },
    "onExitStatus": {
      "title": "Exit code handling",
      "description": "By default tasks will be resolved with `state/reasonResolved`: `completed/completed`\nif all task commands have a zero exit code, or `failed/failed` if any command has a\nnon-zero exit code. This payload property allows customsation of the task resolution\nbased on exit code of task commands.",
      "type": "object",
      "additionalProperties": false,
      "required": [],
      "properties": {
        "retry": {
          "title": "Intermittent task exit codes",
          "description": "Exit codes for any command in the task payload to cause this task to\nbe resolved as `exception/intermittent-task`. Typically the Queue\nwill then schedule a new run of the existing `taskId` (rerun) if not\nall task runs have been exhausted.\n\nSee [itermittent tasks](https://docs.taskcluster.net/docs/reference/platform/taskcluster-queue/docs/worker-interaction#intermittent-tasks) for more detail.\n\nSince: generic-worker 10.10.0",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "title": "Exit codes",
            "type": "integer",
            "minimum": 1
          }
        },
        "purgeCaches": {
          "title": "Purge caches exit status",
          "description": "If the task exists with a purge caches exit status, all caches\nassociated with the task will be purged.\n\nSince: generic-worker 49.0.0",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "title": "Exit statuses",
            "type": "integer",
            "minimum": 1
          }
        }
      }
    },
    "logs": {
      "title": "Logs",
      "description": "Configuration for task logs.\n\nSince: generic-worker 48.2.0",
      "type": "object",
      "additionalProperties": false,
      "required": [],
      "properties": {
        "live": {
          "title": "Live log artifact name",
          "description": "Specifies a custom name for the live log artifact.\nThis is only used if `features.liveLog` is `true`.\n\nSince: generic-worker 48.2.0",
          "type": "string",
          "default": "public/logs/live.log"
        },
        "backing": {
          "title": "Backing log artifact name",
          "description": "Specifies a custom name for the backing log artifact.\nThis is only used if `features.backingLog` is `true`.\n\nSince: generic-worker 48.2.0",
          "type": "string",
          "default": "public/logs/live_backing.log"
        }
      }
    }
  },
  "definitions": {
    "mount": {
      "title": "Mount",
      "oneOf": [
        {
          "$ref": "#/definitions/fileMount"
        },
        {
          "$ref": "#/definitions/writableDirectoryCache"
        },
        {
          "$ref": "#/definitions/readOnlyDirectory"
        }
      ]
    },
    "fileMount": {
      "type": "object",
      "title": "File Mount",
      "properties": {
        "file": {
          "title": "File",
          "type": "string",
          "description": "The filesystem location to mount the file.\n\nSince: generic-worker 5.4.0"
        },
        "content": {
          "description": "Content of the file to be mounted.\n\nSince: generic-worker 5.4.0",
          "$ref": "#/definitions/content"
        }
      },
      "additionalProperties": false,
      "required": [
        "file",
        "content"
      ]
    },
    "writableDirectoryCache": {
      "type": "object",
      "title": "Writable Directory Cache",
      "properties": {
        "directory": {
          "title": "Directory Volume",
          "type": "string",
          "description": "The filesystem location to mount the directory volume.\n\nSince: generic-worker 5.4.0"
        },
        "cacheName": {
          "title": "Cache Name",
          "type": "string",
          "description": "Implies a read/write cache directory volume. A unique name for the\ncache volume. Requires scope `generic-worker:cache:<cache-name>`.\nNote if this cache is loaded from an artifact, you will also require\nscope `queue:get-artifact:<artifact-name>` to use this cache.\n\nSince: generic-worker 5.4.0"
        },
        "content": {
          "title": "Content",
          "description": "Optional content to be preloaded when initially creating the cache\n(if set, `format` must also be provided).\n\nSince: generic-worker 5.4.0",
          "$ref": "#/definitions/content"
        },
        "format": {
          "title": "Format",
          "type": "string",
          "description": "Archive format of the preloaded content (if `content` provided).\n\nSince: generic-worker 5.4.0",
          "enum": [
            "rar",
            "tar.bz2",
            "tar.gz",
            "tar.xz",
            "tar.zst",
            "zip"
          ]
        }
      },
      "additionalProperties": false,
      "required": [
        "directory",
        "cacheName"
      ],
      "dependencies": {
        "content": [
          "format"
        ],
        "format": [
          "content"
        ]
      }
    },
    "readOnlyDirectory": {
      "type": "object",
      "title": "Read Only Directory",
      "properties": {
        "directory": {
          "title": "Directory",
          "type": "string",
          "description": "The filesystem location to mount the directory volume.\n\nSince: generic-worker 5.4.0"
        },
        "content": {
          "title": "Content",
          "description": "Contents of read only directory.\n\nSince: generic-worker 5.4.0",
          "$ref": "#/definitions/content"
        },
        "format": {
          "title": "Format",
          "type": "string",
          "description": "Archive format of content for read only directory.\n\nSince: generic-worker 5.4.0",
          "enum": [
            "rar",
            "tar.bz2",
            "tar.gz",
            "tar.xz",
            "tar.zst",
            "zip"
          ]
        }
      },
      "additionalProperties": false,
      "required": [
        "directory",
        "content",
        "format"
      ]
    },
    "content": {
      "oneOf": [
        {
          "title": "Artifact Content",
          "description": "Requires scope `queue:get-artifact:<artifact-name>`.\n\nSince: generic-worker 5.4.0",
          "type": "object",
          "properties": {
            "taskId": {
              "type": "string",
              "pattern": "^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$"
            },
            "artifact": {
              "type": "string",
              "maxLength": 1024
            },
            "sha256": {
              "type": "string",
              "title": "SHA 256",
              "description": "If provided, the required SHA256 of the content body.\n\nSince: generic-worker 10.8.0",
              "pattern": "^[a-f0-9]{64}$"
            }
          },
          "additionalProperties": false,
          "required": [
            "taskId",
            "artifact"
          ]
        },
        {
          "title": "Indexed Content",
          "description": "Content originating from a task artifact that has been indexed by the Taskcluster Index Service.\n\nSince: generic-worker 51.0.0",
          "type": "object",
          "properties": {
            "namespace": {
              "type": "string",
              "maxLength": 255
            },
            "artifact": {
              "type": "string",
              "maxLength": 1024
            }
          },
          "additionalProperties": false,
          "required": [
            "namespace",
            "artifact"
          ]
        },
        {
          "title": "URL Content",
          "description": "URL to download content from.\n\nSince: generic-worker 5.4.0",
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "title": "URL",
              "description": "URL to download content from.\n\nSince: generic-worker 5.4.0",
              "format": "uri"
            },
            "sha256": {
              "type": "string",
              "title": "SHA 256",
              "description": "If provided, the required SHA256 of the content body.\n\nSince: generic-worker 10.8.0",
              "pattern": "^[a-f0-9]{64}$"
            }
          },
          "additionalProperties": false,
          "required": [
            "url"
          ]
        },
        {
          "title": "Raw Content",
          "description": "Byte-for-byte literal inline content of file/archive, up to 64KB in size.\n\nSince: generic-worker 11.1.0",
          "type": "object",
          "properties": {
            "raw": {
              "type": "string",
              "maxLength": 65536,
              "title": "Raw",
              "description": "Byte-for-byte literal inline content of file/archive, up to 64KB in size.\n\nSince: generic-worker 11.1.0"
            }
          },
          "additionalProperties": false,
          "required": [
            "raw"
          ]
        },
        {
          "title": "Base64 Content",
          "description": "Base64 encoded content of file/archive, up to 64KB (encoded) in size.\n\nSince: generic-worker 11.1.0",
          "type": "object",
          "properties": {
            "base64": {
              "type": "string",
              "maxLength": 65536,
              "title": "Base64",
              "description": "Base64 encoded content of file/archive, up to 64KB (encoded) in size.\n\nSince: generic-worker 11.1.0",
              "pattern": "^[A-Za-z0-9/+]+[=]{0,2}$"
            }
          },
          "additionalProperties": false,
          "required": [
            "base64"
          ]
        }
      ]
    }
  }
}
